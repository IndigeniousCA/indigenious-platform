version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: indigenous-postgres
    environment:
      POSTGRES_USER: indigenous
      POSTGRES_PASSWORD: indigenous123
      POSTGRES_DB: indigenous_platform
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U indigenous"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: indigenous-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Business Hunter Service
  business-hunter:
    build:
      context: ./services/business-hunter
      dockerfile: Dockerfile
    container_name: indigenous-business-hunter
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://indigenous:indigenous123@postgres:5432/indigenous_platform
      REDIS_URL: redis://redis:6379
      SUPABASE_URL: ${SUPABASE_URL}
      SUPABASE_SERVICE_KEY: ${SUPABASE_SERVICE_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "3001:3001"
    restart: unless-stopped

  # Email Campaign Service
  email-campaign:
    build:
      context: ./services/email-campaign
      dockerfile: Dockerfile
    container_name: indigenous-email-campaign
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://indigenous:indigenous123@postgres:5432/indigenous_platform
      REDIS_URL: redis://redis:6379
      RESEND_API_KEY: ${RESEND_API_KEY}
      SENDGRID_API_KEY: ${SENDGRID_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "3002:3002"
    restart: unless-stopped

  # RFQ Matching Engine
  rfq-matching:
    build:
      context: ./services/rfq-matching-engine
      dockerfile: Dockerfile
    container_name: indigenous-rfq-matching
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://indigenous:indigenous123@postgres:5432/indigenous_platform
      REDIS_URL: redis://redis:6379
      OPENAI_API_KEY: ${OPENAI_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "3003:3003"
    restart: unless-stopped

  # Orchestration Service
  orchestration:
    build:
      context: ./services/orchestration
      dockerfile: Dockerfile
    container_name: indigenous-orchestration
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://indigenous:indigenous123@postgres:5432/indigenous_platform
      REDIS_URL: redis://redis:6379
      TEMPORAL_ADDRESS: temporal:7233
      N8N_URL: http://n8n:5678
      INNGEST_EVENT_KEY: ${INNGEST_EVENT_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      temporal:
        condition: service_started
    ports:
      - "3004:3004"
    restart: unless-stopped

  # Temporal Server
  temporal:
    image: temporalio/auto-setup:1.22.4
    container_name: indigenous-temporal
    environment:
      - DB=postgresql
      - DB_PORT=5432
      - POSTGRES_USER=indigenous
      - POSTGRES_PWD=indigenous123
      - POSTGRES_SEEDS=postgres
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development-sql.yaml
    ports:
      - "7233:7233"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./temporal/dynamicconfig:/etc/temporal/config/dynamicconfig

  # Temporal Web UI
  temporal-ui:
    image: temporalio/ui:2.21.3
    container_name: indigenous-temporal-ui
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CORS_ORIGINS=http://localhost:3000
    ports:
      - "8080:8080"
    depends_on:
      - temporal

  # n8n Workflow Automation
  n8n:
    image: n8nio/n8n:latest
    container_name: indigenous-n8n
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=indigenous123
      - N8N_HOST=localhost
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - NODE_ENV=production
      - WEBHOOK_URL=http://localhost:5678/
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=indigenous_platform
      - DB_POSTGRESDB_USER=indigenous
      - DB_POSTGRESDB_PASSWORD=indigenous123
    ports:
      - "5678:5678"
    volumes:
      - n8n_data:/home/node/.n8n
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  # BullMQ Dashboard (Bull Board)
  bull-board:
    image: deadly0/bull-board:latest
    container_name: indigenous-bull-board
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
    ports:
      - "3030:3000"
    depends_on:
      - redis
    restart: unless-stopped

  # Next.js Web Application
  web:
    build:
      context: ./apps/web
      dockerfile: Dockerfile
    container_name: indigenous-web
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_SUPABASE_URL: ${SUPABASE_URL}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY}
      NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY}
      DATABASE_URL: postgresql://indigenous:indigenous123@postgres:5432/indigenous_platform
    ports:
      - "3000:3000"
    depends_on:
      - business-hunter
      - email-campaign
      - rfq-matching
      - orchestration
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: indigenous-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - web
    restart: unless-stopped

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: indigenous-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    restart: unless-stopped

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: indigenous-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=indigenous123
      - GF_INSTALL_PLUGINS=redis-datasource
    ports:
      - "3031:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  n8n_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: indigenous-network
    driver: bridge